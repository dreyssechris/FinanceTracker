services:
  db:
    image: postgres:16-alpine
    container_name: financetracker-pg-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg-data-dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  api:
    build:
      context: ../../FinanceTracker.Api
      dockerfile: Dockerfile
    container_name: financetracker-api-dev
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      DEFAULT_CONNECTION: ${DEFAULT_CONNECTION}
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"

  web:
    build:
      context: ../../financetracker-web
      dockerfile: Dockerfile.dev
    container_name: financetracker-web-dev
    restart: unless-stopped
    environment:
      # API using Caddy (same origin); Vite dev server
      VITE_API_BASE_URL: /financetracker/api
    expose:
      - "5173"
    depends_on:
      - api
    # Für schnellere Iteration Frontend als Bind-Mount (optional):
    volumes:
      - ./financetracker-web:/app
      - /app/node_modules

  # optional eigenes pgAdmin für Dev (anderer Host-Port, um Konflikte zu vermeiden)
  pgadmin:
    image: dpage/pgadmin4
    container_name: financetracker-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5080:80"   # Prod nutzt ggf. 5050 – hier 5080 für Dev
    depends_on:
      - db

  caddy:
    # Für Dev: bequem per Bind-Mount, damit Caddyfile-Änderungen ohne Rebuild greifen
    image: caddy:2
    container_name: caddy-dev
    restart: unless-stopped
    # Keine Ports publishen – Cloudflare Tunnel liefert externen Zugriff
    # ports: []
    volumes:
      - ../../caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      # Für PROD-Block kann dist gemountet werden; Dev nutzt Vite
      - caddy-data-dev:/data
      - caddy-config-dev:/config
    depends_on:
      - web
      - api

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-dev
    restart: unless-stopped
    command: tunnel run
    # teilt Netzwerk mit Caddy, damit "service: http://caddy:80" funktioniert
    network_mode: service:caddy
    volumes:
      - ~/.cloudflared:/etc/cloudflared

volumes:
  pg-data-dev:
  caddy-data-dev:
  caddy-config-dev:
