services:
  db:
    image: postgres:16-alpine
    container_name: financetracker-pg
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    # ports:
    #   - "${POSTGRES_PORT}:5432"

  api:
    build:
      context: ./FinanceTracker.Api
      dockerfile: Dockerfile
    container_name: financetracker-api
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DEFAULT_CONNECTION: ${DEFAULT_CONNECTION}
      # CORS: Browser request to caddy (http://<PI-IP>:8080)
      FRONTEND_ORIGIN: ${CADDY_EXTERNAL_ORIGIN}
    depends_on:
      db:
        condition: service_healthy
    # dont publish; Caddy uses internal Docker network
    expose:
      - "8080"

  web:
    build:
      context: ./financetracker-web
      dockerfile: Dockerfile.dev
    container_name: financetracker-web
    restart: unless-stopped
    environment:
      # Browser calls to API via Caddy reverse proxy
      VITE_API_BASE_URL: /financetracker/api
    # Vite listens inside container on 5173
    expose:
      - "5173"
    depends_on:
      - api

  pgadmin:
    image: dpage/pgadmin4
    container_name: financetracker-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - db

  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    ports:
      - "8080:80"         # Dev-Starting: http://<PI-IP>:8080/financetracker
      # - "8443:443"      # For Future Dev HTTPS
    volumes:
      - ./caddy:/etc/caddy:ro
      - caddy-data:/data
      - caddy-config:/config
    depends_on:
      - web
      - api

volumes:
  pg-data:
  caddy-data:
  caddy-config: